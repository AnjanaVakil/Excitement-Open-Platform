/**
 * 
 */
package eu.excitementproject.eop.distsim.storage;

import java.util.LinkedList;
import java.util.List;

import eu.excitementproject.eop.distsim.domains.RuleDirection;
import eu.excitementproject.eop.distsim.items.Element;
import eu.excitementproject.eop.distsim.items.LemmaPos;
import eu.excitementproject.eop.distsim.items.LemmaPosBasedElement;
import eu.excitementproject.eop.distsim.scoring.ElementSimilarityMeasure;
import eu.excitementproject.eop.distsim.scoring.ElementsSimilarityMeasure;
import eu.excitementproject.eop.distsim.scoring.SimilarityMeasure;
import eu.excitementproject.eop.distsim.scoring.SimilarityRule;

import ac.biu.nlp.nlp.lexical_resource.EmptyRuleInfo;
import ac.biu.nlp.nlp.lexical_resource.LexicalResourceException;
import ac.biu.nlp.nlp.lexical_resource.LexicalRule;
import ac.biu.nlp.nlp.lexical_resource.RuleInfo;
import ac.biu.nlp.nlp.representation.PartOfSpeech;
import ac.biu.nlp.nlp.representation.UnspecifiedPartOfSpeech;

/**
 * @author Meni Adler
 * @since 31/12/2012
 *
 */
public class SimilarityStorageBasedLexicalResource {

	public SimilarityStorageBasedLexicalResource(SimilarityStorage similarityStorage) {
		this.similarityStorage = similarityStorage;
	}
	
	public List<LexicalRule<EmptyRuleInfo>> getRulesForLeft(String lemma, PartOfSpeech pos) throws LexicalResourceException {
		return getRulesForLeft(lemma,pos, RuleDirection.LEFT_TO_RIGHT);
	}
	
	public List<LexicalRule<EmptyRuleInfo>> getRulesForRight(String lemma, PartOfSpeech pos) throws LexicalResourceException {
		return getRulesForLeft(lemma,pos, RuleDirection.RIGHT_TO_LEFT);
	}
	
	protected List<LexicalRule<EmptyRuleInfo>> getRulesForLeft(String lemma, PartOfSpeech pos, RuleDirection ruleDirection) throws LexicalResourceException {
		try {
			LemmaPosBasedElement element1 = new LemmaPosBasedElement(new LemmaPos(lemma, (pos == null ? null : pos.getCanonicalPosTag())));
			List<LexicalRule<EmptyRuleInfo>> ret = new LinkedList<LexicalRule<EmptyRuleInfo>>();
			for (ElementsSimilarityMeasure elemenstSimilarityMeasure : similarityStorage.getSimilarityMeasure(element1.toKey(), ruleDirection)) {
				LemmaPosBasedElement left = (LemmaPosBasedElement)elemenstSimilarityMeasure.getLeftElement();
				LemmaPosBasedElement right = (LemmaPosBasedElement)elemenstSimilarityMeasure.getRightElement();
				LexicalRule<EmptyRuleInfo> rule = 
					new LexicalRule<EmptyRuleInfo>(
							left.getData().getLemma(), new UnspecifiedPartOfSpeech(left.getData().getPOS()),
							right.getData().getLemma(), new UnspecifiedPartOfSpeech(right.getData().getPOS()),
							elemenstSimilarityMeasure.getSimilarityMeasure(), 
							null, similarityStorage.getResourceName(), EmptyRuleInfo.getInstance());
				ret.add(rule);
			} 
			return ret;
		} catch (Exception e) {
			throw new LexicalResourceException(e.toString());
		}
	}
	
	List<LexicalRule<EmptyRuleInfo>> getRules(String leftLemma, PartOfSpeech leftPos, String rightLemma, PartOfSpeech rightPos) throws LexicalResourceException {
		try {
			List<LexicalRule<EmptyRuleInfo>> ret = new LinkedList<LexicalRule<EmptyRuleInfo>>();
			LemmaPosBasedElement leftElement = new LemmaPosBasedElement(new LemmaPos(leftLemma, (leftPos == null ? null : leftPos.getCanonicalPosTag())));
			LemmaPosBasedElement rightElement = new LemmaPosBasedElement(new LemmaPos(rightLemma, (rightPos == null ? null : rightPos.getCanonicalPosTag())));
			for (ElementsSimilarityMeasure similarityRule : similarityStorage.getSimilarityMeasure(leftElement.toKey(), rightElement.toKey())) {
				LemmaPosBasedElement left = (LemmaPosBasedElement)similarityRule.getLeftElement();
				LemmaPosBasedElement right = (LemmaPosBasedElement)similarityRule.getRightElement();
				ret.add(new LexicalRule<EmptyRuleInfo>(left.getData().getLemma(), new UnspecifiedPartOfSpeech(left.getData().getPOS()), right.getData().getLemma(), new UnspecifiedPartOfSpeech(right.getData().getPOS()), similarityRule.getSimilarityMeasure(), null, similarityStorage.getResourceName(), EmptyRuleInfo.getInstance()));
			}
			return ret;
		} catch (Exception e) {
			throw new LexicalResourceException(e.toString());
		}
	}
	
	SimilarityStorage similarityStorage;

}
