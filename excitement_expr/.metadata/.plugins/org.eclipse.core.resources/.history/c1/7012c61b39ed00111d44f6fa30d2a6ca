package eu.excitement.entailment.core.component.knowledge.parsetree;

import java.io.Serializable;


/**
 * DELETEME_LATER [This code has been imported from BIUTEE, with (no modification)] 
 * 
 * Represents part-of-speech tag.
 * The purpose of this class is to wrap the part-of-speech tag that is given by an external
 * resource (e.g. parser or pos-tagger).
 * <P><B>THIS CLASS IS IMMUTABLE. SUBCLASSES SHOULD BE IMMUTABLE AS WELL!</B><P>
 * This class is abstract, and each sub-class should specify which tags are supported, and
 * how each tag is mapped to a canonical part-of-speech tag: {@link CanonicalPosTag}.
 * For those purposes, each subclass should override the methods {@link #validatePosTagString(String)}
 * and {@link #setCanonicalPosTag()}.
 * <P>
 * <B>Improtant note for all implementations</B>:
 * The validation, from the user's point of view is optional. I.e. the user may write a code like:
 * <code>
 * <pre>
 * MyPartOfSpeech pos = null;
 * try
 * {
 *    MyPartOfSpeech pos = new MyPartOfSpeech("blabla");
 * }
 * catch(UnsupportedPosTagStringException e)
 * {
 *    // do nothing
 * }
 * ...
 * // continue code here, using pos, and assuming pos is not null.
 * </pre>
 * </code>
 * 
 * @author Asher Stern
 */

public abstract class PartOfSpeech implements Serializable {

	private static final long serialVersionUID = -1476141823590371836L;

	/**
	 * Gets a string that represents the part of speech, and constructs a {@link PartOfSpeech}
	 * object based on that string.
	 * <P>
	 * The flow is as follows:
	 * <ul>
	 * <li>The given string is validated. I.e. the given string is tested whether it is one of the
	 * expected strings for the specific {@link PartOfSpeech} subclass.<li>
	 * <li>Then, it is set as the string representation of this {@link PartOfSpeech} object.
	 * It can be later retrieved by the method {@link #getStringRepresentation()}<li>
	 * <li>Then, a canonical-part-of-speech, i.e. one of the predefined part-of-speech
	 * values in {@link CanonicalPosTag} is chosen, based on the given string. That canonical
	 * value can be retrieved later by the method {@link #getCanonicalPosTag()}<li>
	 * </ul>
	 * @param posTagString
	 * @throws UnsupportedPosTagStringException
	 */
	public PartOfSpeech(String posTagString) throws UnsupportedPosTagStringException
	{
		UnsupportedPosTagStringException exception = null;
		try
		{
			validatePosTagString(posTagString);
		}
		catch(UnsupportedPosTagStringException e)
		{
			exception = e;
		}
		
		if (null==posTagString)
			posTagString="";
		this.posTagString = posTagString;
		this.canonicalPosTag = null;
		setCanonicalPosTag();
		if (null==this.canonicalPosTag)
		{
			this.canonicalPosTag = CanonicalPosTag.OTHER;
		}
		
		if (exception !=null)
			throw exception;
	}

}
