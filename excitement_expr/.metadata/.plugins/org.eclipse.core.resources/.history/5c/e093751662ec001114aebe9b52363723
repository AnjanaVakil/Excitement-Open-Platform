package eu.excitement.entailment.core;

import eu.excitement.entailment.core.configuration.CommonConfig;
import eu.excitement.entailment.core.exceptions.ComponentException;
import eu.excitement.entailment.core.exceptions.ConfigurationException;

/**
 * There is a small set of methods that are common to all components whatever their internal structure.
These methods are primarily concerned with the administrative aspects of components and their
interactions with the EDA. These methods form the Components interface. All more specific interfaces
as outlined in the following sections are subinterfaces of Components. [Spec section 4.4] 
 * @author tailblues
 */
public interface Components {

	/**
	 * This method will be called by the component user as the signal for initializing the component.
All initialization (including connecting and preparing resources) should be done within this method.
Implementations must check the configuration and raise exceptions if the provided configuration is not
compatible with the implementation.
	 * @param config a common configuration object. This configuration object holds the platform-
wide configuration. An implementation should process the object to retrieve relevant configuration
values for the component. 
	 */
	public void initialize(CommonConfig config) throws ConfigurationException, ComponentException;
	
	public String getComponentName();
	
	public String getInstanceName(); 
	
}
